import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

/**
 * Manage connection to database and perform SQL statements.
 */
public class BankingSystem extends Exception {
	// Connection properties
	private static String driver;
	private static String url;
	private static String username;
	private static String password;
	
	// JDBC Objects
	private static Connection con;
	private static Statement stmt;
	private static ResultSet rs;

	/**
	 * Initialize database connection given properties file.
	 * @param filename name of properties file
	 */
	public static void init(String filename) {
		try {
			Properties props = new Properties();						// Create a new Properties object
			FileInputStream input = new FileInputStream(filename);	// Create a new FileInputStream object using our filename parameter
			props.load(input);										// Load the file contents into the Properties object
			driver = props.getProperty("jdbc.driver");				// Load the driver
			url = props.getProperty("jdbc.url");						// Load the url
			username = props.getProperty("jdbc.username");			// Load the username
			password = props.getProperty("jdbc.password");			// Load the password
		} catch (Exception e) {
			e.printStackTrace();
		}
	}//init
	
	/**
	 * Test database connection.
	 */
	public static void testConnection() {
		System.out.println(":: TEST - CONNECTING TO DATABASE");
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, username, password);
			con.close();
			System.out.println(":: TEST - SUCCESSFULLY CONNECTED TO DATABASE");
			} catch (Exception e) {
				System.out.println(":: TEST - FAILED CONNECTED TO DATABASE");
				e.printStackTrace();
			}
	  }//testConnection

	/**
	 * Create a new customer.
	 * @param name customer name
	 * @param gender customer gender
	 * @param age customer age
	 * @param pin customer pin
	 */
	public static void newCustomer(String name, String gender, String age, String pin) 
	{
		System.out.println(":: CREATE NEW CUSTOMER - RUNNING");
        try {
          Class.forName(driver);                                                                   
          con = DriverManager.getConnection(url, username, password);                 
          stmt = con.createStatement(); 
          stmt.executeUpdate("INSERT INTO p1.customer VALUES(" + 1 + ", '" + name + "', '" + gender + "'," + Integer.valueOf(age) + "," + Integer.valueOf(pin) + ")"); //generated by default not working properly                                             
          stmt.close();                                                                           
          con.close();
		  System.out.println(":: CREATE NEW CUSTOMER - SUCCESS");                                                                       
        } catch (Exception e) {
          System.out.println("Exception in newCustomer()");
          e.printStackTrace();
        }
	}//newCustomer

	/**
	 * Open a new account.
	 * @param id customer id
	 * @param type type of account
	 * @param amount initial deposit amount
	 */
	public static void openAccount(String id, String type, String amount) 
	{
		System.out.println(":: OPEN ACCOUNT - RUNNING");
		try {
			Class.forName(driver);                                                                   
			con = DriverManager.getConnection(url, username, password);                 
			stmt = con.createStatement(); 
			stmt.executeUpdate("INSERT INTO p1.account VALUES(" + 1 + ", " + Integer.valueOf(id) + ", " + Integer.valueOf(amount) + ", '" + type + "', 'A')");                                               
			stmt.close();  //GENERATED BY DEFAULT is not working!                                                                         
			con.close();
			System.out.println(":: OPEN ACCOUNT - SUCCESS");                                                                       
		  } catch (Exception e) {
			System.out.println("Exception in openAccount()");
			e.printStackTrace();
		  }
	}//openAccount

	/**
	 * Close an account.
	 * @param accNum account number
	 */
	public static void closeAccount(String accNum) 
	{
		System.out.println(":: CLOSE ACCOUNT - RUNNING");
		try {
			Class.forName(driver);                                                                   
			con = DriverManager.getConnection(url, username, password);                 
			stmt = con.createStatement(); 
			stmt.executeUpdate("UPDATE p1.account SET status = 'I', balance = 0 WHERE number = " + Integer.valueOf(accNum));                                               
			stmt.close();                                                                           
			con.close(); 
			System.out.println(":: CLOSE ACCOUNT - SUCCESS");                                                                           
		  } catch (Exception e) {
			System.out.println("Exception in closeAccount()");
			e.printStackTrace();
		  }
	}//closeAccount

	/**
	 * Deposit into an account.
	 * @param accNum account number
	 * @param amount deposit amount
	 */
	public static void deposit(String accNum, String amount) 
	{
		System.out.println(":: DEPOSIT - RUNNING");
		try {
			Class.forName(driver);                                                                   
			con = DriverManager.getConnection(url, username, password);                 
			stmt = con.createStatement(); 
			stmt.executeUpdate("UPDATE p1.account SET balance = balance + " + Integer.valueOf(amount) + " WHERE number = " + Integer.valueOf(accNum));                                               
			stmt.close();                                                                           
			con.close(); 
			System.out.println(":: DEPOSIT - SUCCESS");                                                                          
		  } catch (Exception e) {
			System.out.println("Exception in deposit()");
			e.printStackTrace();
		  }
	}//deposit

	/**
	 * Withdraw from an account.
	 * @param accNum account number
	 * @param amount withdraw amount
	 */
	public static void withdraw(String accNum, String amount)
	{
		System.out.println(":: WITHDRAW - RUNNING");
		try {
			Class.forName(driver);                                                                   
			con = DriverManager.getConnection(url, username, password);                 
			stmt = con.createStatement(); 
			rs = stmt.executeQuery("SELECT balance FROM p1.account WHERE number = " + Integer.valueOf(accNum));
			while(rs.next()) {
				if(rs.getInt(1) < Integer.valueOf(amount))
					throw new InsufficientBalanceException("Insufficient balance");
			}
			stmt.executeUpdate("UPDATE p1.account SET balance = balance - " + Integer.valueOf(amount) + " WHERE number = " + Integer.valueOf(accNum));                                               
			rs.close();
			stmt.close();                                                                           
			con.close(); 
			System.out.println(":: WITHDRAW - SUCCESS");                                                                          
		  }catch(InsufficientBalanceException ex) {
			System.out.println(ex.getMessage());
		  }catch (Exception e) {
			System.out.println("Exception in withdraw()");
			e.printStackTrace();
		  }

	}//withdraw

	/**
	 * Transfer amount from source account to destination account. 
	 * @param srcAccNum source account number
	 * @param destAccNum destination account number
	 * @param amount transfer amount
	 */
	public static void transfer(String srcAccNum, String destAccNum, String amount) 
	{
		System.out.println(":: TRANSFER - RUNNING");
		withdraw(srcAccNum, amount); //throw exception if withdraw() throws exception
		deposit(destAccNum, amount); 
		System.out.println(":: TRANSFER - SUCCESS"); 
	}//transfer

	/**
	 * Display account summary.
	 * @param cusID customer ID
	 */
	public static void accountSummary(String cusID) 
	{
		int totalBalance = 0;
		System.out.println(":: ACCOUNT SUMMARY - RUNNING");
		try {
			Class.forName(driver);                                                                   
			con = DriverManager.getConnection(url, username, password);                 
			stmt = con.createStatement(); 
			rs = stmt.executeQuery("SELECT number, balance FROM p1.account WHERE id = " + Integer.valueOf(cusID));
			System.out.println("NUMBER  BALANCE");
			while(rs.next()) {
				System.out.println(rs.getInt(1) + "\t" + rs.getInt(2));
				totalBalance += rs.getInt(2);
			}
			System.out.println("Total Balance: " + totalBalance);
			rs.close();                                     
			stmt.close();                                                                           
			con.close(); 
			System.out.println(":: ACCOUNT SUMMARY - SUCCESS");                                                                         
		  } catch (Exception e) {
			System.out.println("Exception in closeAccount()");
			e.printStackTrace();
		  }	
	}//accountSummary

	/**
	 * Display Report A - Customer Information with Total Balance in Decreasing Order.
	 */
	public static void reportA() 
	{
		System.out.println(":: REPORT A - RUNNING");
		try {
			Class.forName(driver);                                                                   
			con = DriverManager.getConnection(url, username, password);                 
			stmt = con.createStatement(); 
			rs = stmt.executeQuery("SELECT SUM(balance) FROM p1.account GROUP BY id ORDER BY SUM(balance) DESC");
			while(rs.next()) {
				System.out.println(rs.getInt(1));
			}
			rs.close();
			stmt.close();
			con.close(); 
			System.out.println(":: REPORT A - SUCCESS");                                                                   
		  } catch (Exception e) {
			System.out.println("Exception in deposit()");
			e.printStackTrace();
		  }		
	}//reportA

	/**
	 * Display Report B - Customer Information with Total Balance in Decreasing Order.
	 * @param min minimum age
	 * @param max maximum age
	 */
	public static void reportB(String min, String max) 
	{
		System.out.println(":: REPORT B - RUNNING");
		try {
			Class.forName(driver);                                                                   
			con = DriverManager.getConnection(url, username, password);                 
			stmt = con.createStatement(); 
			stmt.executeQuery("SELECT ");
			con.close(); 
			System.out.println(":: DEPOSIT - SUCCESS");                                                                          
		  } catch (Exception e) {
			System.out.println("Exception in deposit()");
			e.printStackTrace();
		  }		
		System.out.println(":: REPORT B - SUCCESS");
	}//reportB
}

class InsufficientBalanceException extends Exception {
	public InsufficientBalanceException(String s) {
		super(s);
	}
}
